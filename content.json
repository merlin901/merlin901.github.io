{"meta":{"title":"Merlin","subtitle":"Merlin","description":"欢迎","author":"Merlin","url":"http://merlin901.github.io","root":"/"},"pages":[{"title":"about","date":"2020-03-07T05:17:59.000Z","updated":"2020-03-07T05:18:12.828Z","comments":true,"path":"about/index.html","permalink":"http://merlin901.github.io/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2020-03-07T05:10:18.000Z","updated":"2020-03-07T05:15:11.263Z","comments":true,"path":"categories/index.html","permalink":"http://merlin901.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2020-03-07T05:18:49.000Z","updated":"2020-03-07T05:19:37.313Z","comments":true,"path":"friends/index.html","permalink":"http://merlin901.github.io/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"contact","date":"2020-03-07T05:18:38.000Z","updated":"2020-03-07T05:19:16.497Z","comments":true,"path":"contact/index.html","permalink":"http://merlin901.github.io/contact/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-03-07T05:15:39.000Z","updated":"2020-03-07T05:15:58.683Z","comments":true,"path":"tags/index.html","permalink":"http://merlin901.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"MySQL之内连接与外连接","slug":"MySQL之内连接与外连接","date":"2020-03-11T16:10:35.000Z","updated":"2020-03-11T16:57:02.181Z","comments":true,"path":"2020/03/12/59504/","link":"","permalink":"http://merlin901.github.io/2020/03/12/59504/","excerpt":"","text":"虽然我们常常说增删改查增删改查，但是，真正使用的时候，一个查字基本囊括了我们操作数据库的大半江山。固然，查询是有多重要不言而喻。查询分为很多种：投影查询，分页查询，条件查询，笛卡尔查询、连接查询等。而连接查询就是这次我要讲的重点。 连接查询分为内连接和外连接。 内连接（INNER JOIN）：查询两个表包含的共同包含的行数据。 外连接（OUTER JOIN）：外连接又具体分为以下三种： 左连接（LEFT OUTER JOIN）：查询只包含左表的行数据，右表不包含的数据用NULL代替； 右连接（RIGHT OUTER JOIN）：查询只包含右表的行数据，左表不包含的数据用NULL代替； 全连接（FULL OUTER JOIN）：查询左右表包含的所有数据，空缺字段用NULL代替。 如果用集合表达比较直观： INNER JOIN：很好理解，只保留共同元素，就是数学中的交集：result=A∩B LEFT OUTER JOIN：只保留左表数据，即result=A； RIGHT OUTER JOIN：只保留右表数据，即result=B； FULL OUTER JOIN：保留全部行数据，类似于并集result=A∪B。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://merlin901.github.io/tags/MySQL/"}]},{"title":"Windows系统中重设MySQL密码","slug":"Windows系统中重设MySQL密码","date":"2020-03-08T16:34:24.000Z","updated":"2020-03-08T17:05:04.675Z","comments":true,"path":"2020/03/09/9882/","link":"","permalink":"http://merlin901.github.io/2020/03/09/9882/","excerpt":"","text":"今天在连接MySQL数据库时报了错： Access denied for user 'root'@'localhost' (using password: NO) 网上找了一圈答案，始终无法解决，最后在Stack Overflow的一份答案中被引到了官方文档， 终于，找到了一份靠谱的答案 首先，以管理员的身份打开cmd，或者快捷键Ctrl+Shift+Esc找到服务，停止MySQL服务 cmd命令 net stop mysql 然后，先创建一个文件，名字无所谓，内容是一串修改root的代码，比如官方文档给出的： ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass'; 保存为C:\\mysql-init.txt。 随即来到MySQL的安装目录，找到%MySQL_HOME%/bin路径，在搜索栏中打开cmd 使用一下命令： mysqld --defaults-file=\"%MySQL_HOME%\\\\bin\\\\my.ini\" --init-file=C:\\\\mysql-init.txt --console 以上的%MySQL_HOME%/bin代表你的MySQL根目录。 其中–defaults-file指向你的MySQL初始化文件 –init-file指向修改密码的文件 –console可以让你在控制台看到日志文件，可加可不加 重启MySQL服务 以管理员身份使用命令 net start mysql 或者从控制面板中进入 使用新密码“MyNewPass”登录MySQL，至此修改密码成功 mysql -uroot -pMyNewPass document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://merlin901.github.io/tags/MySQL/"},{"name":"错题集","slug":"错题集","permalink":"http://merlin901.github.io/tags/%E9%94%99%E9%A2%98%E9%9B%86/"}]},{"title":"解决博客中不显示图片的方法","slug":"解决博客中不显示图片的方法","date":"2020-03-08T10:09:00.000Z","updated":"2020-03-08T10:12:03.477Z","comments":true,"path":"2020/03/08/36176/","link":"","permalink":"http://merlin901.github.io/2020/03/08/36176/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"常见技术词汇拼写","slug":"常见技术词汇拼写","date":"2020-03-07T17:40:51.000Z","updated":"2020-03-08T10:03:59.797Z","comments":true,"path":"2020/03/08/31852/","link":"","permalink":"http://merlin901.github.io/2020/03/08/31852/","excerpt":"","text":"在这个金三银四的时节，又到了跳槽和找工作的高峰期。作为一名合格的程序员，在简历中最最基本的就是技术词汇不能有错拼。虽然是个简单的单词，但是在简历上拼错的人也并不少见，经常是大小写不分，我自己就是一个鲜活的例子。尽管说一两个单词拼错了并不能说明你技术不行，但是在面试官面前你的简历会有一定程度的减分。这个本不该丢的分，实在可惜。 为了自己以后不再犯这样的低级错误，同时也可以帮助后面需要的人，今天我就做一下汇总。当然，我的技术非常有限，我所罗列的技术只是我目前所能接触范围之内的，以后碰到新词会持续更新。若有什么不对的地方，还望各位大佬大方指出。 正确拼写 错误示例 Java java HTML html CSS css JavaScript、JS javascript、js Servlet servlet JSP jsp Tomcat tomcat MySQL Mysql、mysql Web WEB、web Ajax ajax JSON json Linux linux Thymeleaf thymeleaf Spring spring Spring Boot SpringBoot、springboot Mybatis mybatis Spring MVC SpringMVC、springmvc Git GIT、git RESTful restful Redis redis Eclipse eclipse IDEA idea document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://merlin901.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"【转载】CentOS 7 网络环境配置","slug":"【转载】CentOS-7-网络环境配置","date":"2020-03-07T12:13:34.000Z","updated":"2020-03-07T12:19:16.506Z","comments":true,"path":"2020/03/07/3137/","link":"","permalink":"http://merlin901.github.io/2020/03/07/3137/","excerpt":"","text":"本文转载自https://www.cnblogs.com/stormlong/p/10854306.html 最近刚装完 CentOS 7.5 系统，由于网络不通，导致无法用 yum 命令下载软件，经过了各种折腾，终于搞定了，这里讲解一下 如何设置初始网络。 本案例环境 VmWare 11.0 , 操作系统 CentOS 7.5（安装时，选择了桌面版）。 一、主机 ping 通网络这个不用多说，只要你电脑连接网络就可以实现。 这里会发现 ping 百度 实际就是在 ping 61.135.169.121 这台主机，这台主机放在了公网了，所以能够让 所有联网用户 ping 通。 而 www.baidu.com 到 61.135.169.121 实际上经过了 DNS 服务器，它就是把 域名 与 ip 地址对应起来，这里简单解释一下。 二、虚拟机 ping 通网络这个是我们的主要目的，有了网络，我们才用 yum 命令 安装所需软件。 这里我们采用 固定虚拟机 操作系统ip 的形式配置，方便我们在不同网络环境下，无须再次更改 ip 地址。 1. VMware 虚拟网络编辑器 网络信息 这里我们 需要记下 第三个 地方的信息。第二步的配置 跟这个有关。 2. 操作系统 ip 配置 （桌面版）打开虚拟机网络配置 下面的 ip 地址配置，就是根据第一步的信息过来的。 配置到这里就可以了，关闭网络，在重新连接一次，就可以 ping 通网络了。 如果还没有 ping 通，可以尝试 还原默认设置 后，再次重复上述步骤。 2.操作系统 ip 配置 （配置文件版，可忽略）实际上，上面图形化界面操作的就是这个文件，没有安装桌面的可以参考下面的操作–命令版 进入/etc/sysconfig/network-scripts/ifcfg-xxx 文件（xxx不同电脑可能不一样） 主要更改这几个地方。修改后，重新连接网络即可。 2.操作系统 ip 配置 （命令版）vim /etc/sysconfig/network-scripts/ifcfg-xxx i 键 添加上述信息， esc 键回到命令行模式 :wq 写入并退出。 service network restart 重启网络。 三、虚拟机 ping 通主机这一步不需要做什么，只需知道主机 IP 地址即可，实际上 ping 通也没有什么意义。 cmd 下 ipconfig 可以查看本机ip 例如：我用的 wifi 来连接的，则我的IP为 192.168.1.103 [图片上传中…(image-976b23-1583475319539-6)] 从虚拟机 ping 这个 IP 即可，发现可以 ping 的通 四、主机 ping 通虚拟机这一步就显得有意义了，通常我们开启虚拟机，一般都是通过第三方连接工具来操作centos，不会直接在系统里面通过终端来操作。 所以使用第三方工具的前提就是 主机可以 ping 通虚拟机。 在主机打开这个，因为这个 是 NET模式下 的网卡，VM1是 仅主机模式 下的网卡，而我们第二步的配置 用的就是 Net 模式的 配置 [图片上传中…(image-c4e3eb-1583475319539-4)] 设置固定ip即可。 [图片上传中…(image-d87a3b-1583475319539-3)] 这里我们测试一下 我的虚拟机 IP为 192.168.126.125，当然也就是第二步设置的固定ip [图片上传中…(image-d8cbb0-1583475319539-2)] 在主机下 ping 一下试试 可以ping 通，则证明我们的配置没有问题。 五、说明可以发现，我并没有关闭主机，和虚拟机的防火墙，但也可以实现 相互主机与虚拟机的互相ping 通。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/tags/Linux/"},{"name":"VMware","slug":"VMware","permalink":"http://merlin901.github.io/tags/VMware/"},{"name":"配置","slug":"配置","permalink":"http://merlin901.github.io/tags/%E9%85%8D%E7%BD%AE/"}]},{"title":"已解决：（键盘驱动）由于其配置信息(注册表中的)不完整或已损坏,Windows 无法启动这个硬件设备。 (代号19）","slug":"已解决：（键盘驱动）由于其配置信息-注册表中的-不完整或已损坏-Windows-无法启动这个硬件设备。-代号19）","date":"2020-03-07T12:11:40.000Z","updated":"2020-03-07T12:15:01.566Z","comments":true,"path":"2020/03/07/6281/","link":"","permalink":"http://merlin901.github.io/2020/03/07/6281/","excerpt":"","text":"就在安装好VMware并且安装CentOS重启系统后莫名奇妙的键盘不能用了，一度怀疑键盘坏了，经过测试不是键盘的问题。 从键盘驱动下手，找到设备管理器进去。果不其然，键盘中的两个驱动都标有一个感叹号。没辙，驱动坏了，找到联想官网，结果摆弄半天愣是没有找到键盘驱动，作罢。 继续回到设备管理器，点开已损坏的驱动，有这样一行提示：由于其配置信息(注册表中的)不完整或已损坏,Windows 无法启动这个硬件设备。 (代号19） 找到错误提示后从百度搜索，最终得以找到解决方案。 使用软键盘（很庆幸鼠标驱动没坏）打开注册表regedit，定位到到这一 HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Class/{4D36E96B-E325-11CE-BFC1-08002BE10318} 删除UpperFilters一项卸载损坏驱动，重启 这个时候，依然未修复，但是提示信息变成了该设备无法启动（代码10） 再操作，添加UpperFilters值为kbdclass再次卸载驱动，重启完美成功！ 巧的是，我找到的解决方案的作者也是碰到了装虚拟机的问题所以，不出意外，应该是虚拟机的锅 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"错题集","slug":"错题集","permalink":"http://merlin901.github.io/tags/%E9%94%99%E9%A2%98%E9%9B%86/"}]},{"title":"Linux CentOS 下修改系统默认启动方式","slug":"Linux-CentOS-下修改系统默认启动方式","date":"2020-03-07T12:10:06.000Z","updated":"2020-03-07T12:19:09.016Z","comments":true,"path":"2020/03/07/33892/","link":"","permalink":"http://merlin901.github.io/2020/03/07/33892/","excerpt":"","text":"因为我的Linux默认启动方式是图形界面，遂想改为命令行界面。在网上找了好几圈，好多人都是说使用init 命令，结果确实不行，仅且使用当次使用命令才有效果最后终于，找到了解决方案 默认命令行界面启动： systemctl set-default multi-user.target 默认图形化界面启动： systemctl set-default graphical.target document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/tags/Linux/"},{"name":"Linux命令","slug":"Linux命令","permalink":"http://merlin901.github.io/tags/Linux%E5%91%BD%E4%BB%A4/"}]},{"title":"Windows 下安装 CentOS 7 系统","slug":"Windows 下安装 CentOS 7 系统","date":"2020-03-07T11:40:18.000Z","updated":"2020-03-07T12:16:56.627Z","comments":true,"path":"2020/03/07/63534/","link":"","permalink":"http://merlin901.github.io/2020/03/07/63534/","excerpt":"","text":"今天准备打开 Linux 开启远程连接，结果打开是这样的：内心是有点崩溃的，想了一想，应该是前几天清理磁盘的时候给误删了没办法，抄起家伙就是干！重装！首先下载好CentOS 7映射文件这里可以用阿里云站点下载：http://mirrors.aliyun.com/centos/7/isos/x86_64/选择DVD下载下载完成之后将镜像文件放在一个相对安全的文件夹中，避免误删 开始安装过程 选择新建虚拟机 选择自定义 选择对应的版本 选择映像文件 命名 选择处理器和内核数 内存根据自己需要来配 网络类型选择NAT模式 默认推荐 默认推荐 创建新磁盘 分配磁盘大小，同样根据自己需要配置 下一步 完成 成功创建 在往后面的相关配置可以参考这篇文章（我也是按照这个步骤完成的）Centos7.x安装系统全过程教程 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://merlin901.github.io/tags/Linux/"},{"name":"VMware","slug":"VMware","permalink":"http://merlin901.github.io/tags/VMware/"},{"name":"虚拟机","slug":"虚拟机","permalink":"http://merlin901.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-05T13:24:17.552Z","updated":"2020-03-07T09:23:49.181Z","comments":true,"path":"2020/03/05/16107/","link":"","permalink":"http://merlin901.github.io/2020/03/05/16107/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}